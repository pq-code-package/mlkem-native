# SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT

name: CT Test
description: Builds the library with given flags and runs Valgrind-based constant-time tests

inputs:
  cflags:
    description: CFLAGS to pass to compilation
    default: ""
  valgrind_flags:
    description: Extra flags to pass to valgrind
    default: ""
  ctllvm:
    description: whether to run CT-LLVM or not (requires LLVM)
    default: "false"

runs:
  using: composite
  steps:
      - name: System info
        shell: ${{ env.SHELL }}
        run: |
          ARCH=$(uname -m)
          echo <<-EOF
            ## Setup
            Architecture: $ARCH
            - $(uname -a)
            - $(nix --version || echo 'nix not present')
            - $(bash --version | grep -m1 "")
            - $(python3 --version)
            - $(${{ inputs.cross_prefix }}${CC} --version | grep -m1 "")
          EOF
          cat >> $GITHUB_STEP_SUMMARY <<-EOF
            ## Setup
            Architecture: $ARCH
            - $(uname -a)
            - $(nix --version || echo 'nix not present')
            - $(bash --version | grep -m1 "")
            - $(python3 --version)
            - $(${{ inputs.cross_prefix }}${CC} --version | grep -m1 "")
          EOF
      - shell: ${{ env.SHELL }}
        run: |
          make clean
          tests func --exec-wrapper="valgrind --error-exitcode=1 --track-origins=yes ${{ inputs.valgrind_flags }}" --cflags="-DMLK_CONFIG_CT_TESTING_ENABLED -DNTESTS=50 ${{ inputs.cflags }}"
      - name: Run CT-LLVM analysis
        shell: ${{ env.SHELL }}
        if: ${{ inputs.ctllvm == 'true' }}
        run: |
          make clean
          # Run CT-LLVM analysis on monolithic build with single-threaded compilation
          # CT-LLVM plugin is available directly in PATH via nix package
          ./scripts/tests examples --no-run -l monolithic_build --cflags="-fpass-plugin=$(which ctllvm.so) -g ${{ inputs.cflags }}" -j1
