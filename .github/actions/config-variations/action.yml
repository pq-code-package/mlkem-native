# SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT

name: 'Custom config tests'
description: 'Build and test mlkem-native with various custom configs'
inputs:
  gh_token:
    description: 'GitHub token'
    required: true
  tests:
    description: 'List of tests to run (space-separated IDs) or "all" for all tests. Available IDs: pct-enabled, pct-enabled-broken, custom-zeroize, native-cap-ON, native-cap-OFF, native-cap-ID_AA64PFR1_EL1, native-cap-CPUID_AVX2, no-asm, serial-fips202, custom-randombytes, custom-memcpy, custom-memset, custom-stdlib, nblocks-1, nblocks-2, nblocks-4'
    required: false
    default: 'all'
  opt:
    description: 'Optimization level to pass to multi-functest'
    required: false
    default: 'all'
runs:
  using: 'composite'
  steps:
    - name: "PCT enabled"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'pct-enabled') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-DMLK_CONFIG_KEYGEN_PCT -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: true
        extra_args: "--exclude-example basic_deterministic"
    - name: "PCT enabled + broken"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'pct-enabled-broken') }}
      shell: bash
      run: |
        make clean
        CFLAGS='-DMLK_CONFIG_FILE=\"../../test/break_pct_config.h\"' make func -j4
        # PCT breakage is done at runtime via MLK_BREAK_PCT
        make run_func                 # Should be OK
        MLK_BREAK_PCT=0 make run_func # Should be OK
        if (MLK_BREAK_PCT=1 make run_func 2>&1 >/dev/null); then
           echo "PCT failure expected"
           exit 1
        else
           echo "PCT failed as expected"
        fi
    - name: "Custom zeroization (explicit_bzero)"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'custom-zeroize') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_zeroize_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom native capability functions (static ON)"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'native-cap-ON') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_native_capability_config_1.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom native capability functions (static OFF)"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'native-cap-OFF') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_native_capability_config_0.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom native capability functions (ID_AA64PFR1_EL1 detection)"
      if: ${{ (inputs.tests == 'all' || contains(inputs.tests, 'native-cap-ID_AA64PFR1_EL1')) && runner.os == 'Linux' && runner.arch == 'ARM64' }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -march=armv8.4-a+sha3 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_native_capability_config_ID_AA64PFR1_EL1.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom native capability functions (CPUID AVX2 detection)"
      if: ${{ (inputs.tests == 'all' || contains(inputs.tests, 'native-cap-CPUID_AVX2')) && runner.os == 'Linux' && runner.arch == 'X64' }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -mavx2 -mbmi2 -mpopcnt -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_native_capability_config_CPUID_AVX2.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "No ASM"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'no-asm') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/no_asm_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Serial FIPS202 (no batched Keccak)"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'serial-fips202') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/serial_fips202_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom randombytes"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'custom-randombytes') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_randombytes_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom memcpy"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'custom-memcpy') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_memcpy_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom memset"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'custom-memset') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_memset_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "Custom stdlib (memcpy + memset)"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'custom-stdlib') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-std=c11 -D_GNU_SOURCE -DMLK_CONFIG_FILE=\\\\\\\"../../test/custom_stdlib_config.h\\\\\\\" -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "MLKEM_GEN_MATRIX_NBLOCKS=1"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'nblocks-1') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -DMLKEM_GEN_MATRIX_NBLOCKS=1"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "MLKEM_GEN_MATRIX_NBLOCKS=2"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'nblocks-2') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -DMLKEM_GEN_MATRIX_NBLOCKS=2"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
    - name: "MLKEM_GEN_MATRIX_NBLOCKS=4"
      if: ${{ inputs.tests == 'all' || contains(inputs.tests, 'nblocks-4') }}
      uses: ./.github/actions/multi-functest
      with:
        gh_token: ${{ inputs.gh_token }}
        compile_mode: native
        cflags: "-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -DMLKEM_GEN_MATRIX_NBLOCKS=4"
        func: true
        kat: true
        acvp: true
        opt: ${{ inputs.opt }}
        examples: false # Some examples use a custom config themselves
