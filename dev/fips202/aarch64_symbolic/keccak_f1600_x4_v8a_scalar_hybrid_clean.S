/*
 * Copyright (c) The mlkem-native project authors
 * Copyright (c) 2021-2022 Arm Limited
 * Copyright (c) 2022 Matthias Kannwischer
 * SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT
 */

// Author: Hanno Becker <hannobecker@posteo.de>
// Author: Matthias Kannwischer <matthias@kannwischer.eu>

/*yaml
  Name: keccak_f1600_x4_v8a_scalar_hybrid_clean
  Description: AArch64 hybrid scalar/vector clean implementation of Keccak-f[1600] permutation for four sequential states (clean version for optimization)
  Signature: void mlk_keccak_f1600_x4_v8a_scalar_hybrid_asm(uint64_t state[100], const uint64_t rc[24])
  ABI:
    x0:
      type: buffer
      size_bytes: 800
      permissions: read/write
      c_parameter: uint64_t *state
      description: Four sequential Keccak states (state0[25], state1[25], state2[25], state3[25])
    x1:
      type: buffer
      size_bytes: 192
      permissions: read-only
      c_parameter: uint64_t const *rc
      description: Round constants (24 x uint64_t)
  Stack:
    bytes: 224
    description: register preservation and temporary storage
*/

#include "../../../../common.h"
#if defined(MLK_FIPS202_AARCH64_NEED_X4_V8A_SCALAR_HYBRID) && \
    !defined(MLK_CONFIG_MULTILEVEL_NO_SHARED)
/* simpasm: header-end */

#define KECCAK_F1600_ROUNDS 24

/****************** REGISTER ALLOCATIONS *******************/

    input_addr     .req x0
    input_addr_hi  .req x4
    input_rc       .req x1
    const_addr     .req x29
    outer          .req x30
    cur_const      .req x26

    /* Mapping of Kecck-f1600 SIMD state to vector registers
     * at the beginning and end of each round. */

    vAba     .req v0
    vAbe     .req v1
    vAbi     .req v2
    vAbo     .req v3
    vAbu     .req v4
    vAga     .req v5
    vAge     .req v6
    vAgi     .req v7
    vAgo     .req v8
    vAgu     .req v9
    vAka     .req v10
    vAke     .req v11
    vAki     .req v12
    vAko     .req v13
    vAku     .req v14
    vAma     .req v15
    vAme     .req v16
    vAmi     .req v17
    vAmo     .req v18
    vAmu     .req v19
    vAsa     .req v20
    vAse     .req v21
    vAsi     .req v22
    vAso     .req v23
    vAsu     .req v24

    vAsud    .req d24

    tmp0 .req v25
    tmp1 .req v26
    tmp2 .req v27
    tmp3 .req v28

    tmp0q .req q25
    tmp1q .req q26
    tmp2q .req q27
    tmp3q .req q28

    tmp0d .req d25
    tmp2d .req d27

    /* C[x] = A[x,0] xor A[x,1] xor A[x,2] xor A[x,3] xor A[x,4],   for x in 0..4 */
    C0 .req v30
    C1 .req v29
    C2 .req v28
    C3 .req v27
    C4 .req v26

    /* E[x] = C[x-1] xor rot(C[x+1],1), for x in 0..4 */
    E0 .req v26
    E1 .req v25
    E2 .req v29
    E3 .req v28
    E4 .req v27

    /* A_[y,2*x+3*y] = rot(A[x,y]) */
    vAbi_ .req v2
    vAbo_ .req v3
    vAbu_ .req v4
    vAga_ .req v10
    vAge_ .req v11
    vAgi_ .req v7
    vAgo_ .req v8
    vAgu_ .req v9
    vAka_ .req v15
    vAke_ .req v16
    vAki_ .req v12
    vAko_ .req v13
    vAku_ .req v14
    vAma_ .req v20
    vAme_ .req v21
    vAmi_ .req v17
    vAmo_ .req v18
    vAmu_ .req v19
    vAsa_ .req v0
    vAse_ .req v1
    vAsi_ .req v22
    vAso_ .req v23
    vAsu_ .req v24
    vAba_ .req v30
    vAbe_ .req v27

    /* Unused temporary */
    vtmp .req v31

    /* Mapping of Kecck-f1600 state to scalar registers
     * at the beginning and end of each round. */
    tAba     .req x1    /* Some compilers don't like sAba */
    sAbe     .req x6
    sAbi     .req x11
    sAbo     .req x16
    sAbu     .req x21
    sAga     .req x2
    sAge     .req x7
    sAgi     .req x12
    sAgo     .req x17
    sAgu     .req x22
    sAka     .req x3
    sAke     .req x8
    sAki     .req x13
    sAko     .req x28
    sAku     .req x23
    sAma     .req x4
    sAme     .req x9
    sAmi     .req x14
    sAmo     .req x19
    sAmu     .req x24
    sAsa     .req x5
    sAse     .req x10
    sAsi     .req x15
    sAso     .req x20
    sAsu     .req x25

    tmp .req x30

/************************ MACROS ****************************/


.macro push_pair reg1, reg2, offset
    stp \reg1, \reg2, [sp, #\offset]
    .cfi_rel_offset \reg1, \offset
    .cfi_rel_offset \reg2, (\offset + 8)
.endm

.macro restore_pair reg1, reg2, offset
    ldp \reg1, \reg2, [sp, #\offset]
    .cfi_restore \reg1
    .cfi_restore \reg2
.endm

.macro eor3_m1 d s0 s1 s2
   eor \d\().16b, \s0\().16b, \s1\().16b
   eor \d\().16b, \d\().16b,  \s2\().16b
.endm

.macro rax1_m1 d s0 s1
   add vtmp.2d, \s1\().2d, \s1\().2d
   sri vtmp.2d, \s1\().2d, #63
   eor \d\().16b, vtmp.16b, \s0\().16b
.endm

.macro xar_m1 d s0 s1 imm
   eor vtmp.16b, \s0\().16b, \s1\().16b
   shl \d\().2d, vtmp.2d, #(64-\imm)
   sri \d\().2d, vtmp.2d, #(\imm)
.endm

.macro bcax_m1 d s0 s1 s2
    bic vtmp.16b, \s1\().16b, \s2\().16b
    eor \d\().16b, vtmp.16b, \s0\().16b
.endm

.macro load_lane out0, out1, out2, out3, idx
    ldp tmp0q, tmp1q, [input_addr,    #(16*(\idx))]
    ldp tmp2q, tmp3q, [input_addr_hi, #(16*(\idx))]
    trn1 \out0\().2d, tmp0.2d, tmp2.2d
    trn2 \out1\().2d, tmp0.2d, tmp2.2d
    trn1 \out2\().2d, tmp1.2d, tmp3.2d
    trn2 \out3\().2d, tmp1.2d, tmp3.2d
.endm

.macro load_lane_single out, idx
    ldr tmp0d, [input_addr,    #(16*(\idx))]
    ldr tmp2d, [input_addr_hi, #(16*(\idx))]
    trn1 \out\().2d, tmp0.2d, tmp2.2d
.endm

.macro store_lane out0, out1, out2, out3, idx
    trn1 tmp0\().2d, \out0\().2d, \out1\().2d
    trn1 tmp1\().2d, \out2\().2d, \out3\().2d
    stp tmp0q, tmp1q, [input_addr,    #(16*(\idx))]
    trn2 tmp2\().2d, \out0\().2d, \out1\().2d
    trn2 tmp3\().2d, \out2\().2d, \out3\().2d
    stp tmp2q, tmp3q, [input_addr_hi, #(16*(\idx))]
.endm

.macro store_lane_single out, idx
    str  \out\()d, [input_addr, #(16*(\idx))]
    trn2 tmp0.2d, \out\().2d, \out\().2d
    str  tmp0d, [input_addr_hi, #(16*(\idx))]
.endm

.macro load_input_vector
    add input_addr_hi, input_addr, #0xc8
    load_lane vAba, vAbe, vAbi, vAbo, 0
    load_lane vAbu, vAga, vAge, vAgi, 2
    load_lane vAgo, vAgu, vAka, vAke, 4
    load_lane vAki, vAko, vAku, vAma, 6
    load_lane vAme, vAmi, vAmo, vAmu, 8
    load_lane vAsa, vAse, vAsi, vAso, 10
    load_lane_single vAsu, 12
.endm

.macro store_input_vector
    add input_addr_hi, input_addr, #0xc8
    store_lane vAba, vAbe, vAbi, vAbo, 0
    store_lane vAbu, vAga, vAge, vAgi, 2
    store_lane vAgo, vAgu, vAka, vAke, 4
    store_lane vAki, vAko, vAku, vAma, 6
    store_lane vAme, vAmi, vAmo, vAmu, 8
    store_lane vAsa, vAse, vAsi, vAso, 10
    store_lane_single vAsu, 12
.endm

.macro store_input_scalar idx
    add input_addr, input_addr, #((2 + \idx)*25*8)
    stp tAba, sAbe, [input_addr, #(1*8*0)]
    stp sAbi, sAbo, [input_addr, #(1*8*2)]
    stp sAbu, sAga, [input_addr, #(1*8*4)]
    stp sAge, sAgi, [input_addr, #(1*8*6)]
    stp sAgo, sAgu, [input_addr, #(1*8*8)]
    stp sAka, sAke, [input_addr, #(1*8*10)]
    stp sAki, sAko, [input_addr, #(1*8*12)]
    stp sAku, sAma, [input_addr, #(1*8*14)]
    stp sAme, sAmi, [input_addr, #(1*8*16)]
    stp sAmo, sAmu, [input_addr, #(1*8*18)]
    stp sAsa, sAse, [input_addr, #(1*8*20)]
    stp sAsi, sAso, [input_addr, #(1*8*22)]
    str sAsu,       [input_addr, #(1*8*24)]
    sub input_addr, input_addr, #((2 + \idx)*25*8)
.endm

.macro load_input_scalar idx
    add input_addr, input_addr, #((2 + \idx)*25*8)
    ldp tAba, sAbe, [input_addr, #(1*8*0)]
    ldp sAbi, sAbo, [input_addr, #(1*8*2)]
    ldp sAbu, sAga, [input_addr, #(1*8*4)]
    ldp sAge, sAgi, [input_addr, #(1*8*6)]
    ldp sAgo, sAgu, [input_addr, #(1*8*8)]
    ldp sAka, sAke, [input_addr, #(1*8*10)]
    ldp sAki, sAko, [input_addr, #(1*8*12)]
    ldp sAku, sAma, [input_addr, #(1*8*14)]
    ldp sAme, sAmi, [input_addr, #(1*8*16)]
    ldp sAmo, sAmu, [input_addr, #(1*8*18)]
    ldp sAsa, sAse, [input_addr, #(1*8*20)]
    ldp sAsi, sAso, [input_addr, #(1*8*22)]
    ldr sAsu,       [input_addr, #(1*8*24)]
    sub input_addr, input_addr, #((2 + \idx)*25*8)
.endm

#define STACK_LOCS 2

#define STACK_SIZE (16*6 + 8*8 + 6*8 + (STACK_LOCS) * 8)
#define STACK_BASE_GPRS (6*8)
#define STACK_BASE_VREGS (6*8 + 16*6)
#define STACK_OFFSET_LOCS (16*6 + 8*8 + 6*8)

#define STACK_OFFSET_INPUT (0*8)
#define STACK_OFFSET_CONST_SCALAR (1*8)
#define STACK_OFFSET_CONST_VECTOR (2*8)
#define STACK_OFFSET_COUNT (3*8)
#define STACK_OFFSET_OUTER (4*8)

#define STACK_LOC_0 ((STACK_OFFSET_LOCS) + 0*8)
#define STACK_LOC_1 ((STACK_OFFSET_LOCS) + 1*8)

.macro save_gprs
    push_pair x19, x20, (STACK_BASE_GPRS + 16*0)
    push_pair x21, x22, (STACK_BASE_GPRS + 16*1)
    push_pair x23, x24, (STACK_BASE_GPRS + 16*2)
    push_pair x25, x26, (STACK_BASE_GPRS + 16*3)
    push_pair x27, x28, (STACK_BASE_GPRS + 16*4)
    push_pair x29, x30, (STACK_BASE_GPRS + 16*5)
.endm

.macro restore_gprs
    restore_pair x19, x20, (STACK_BASE_GPRS + 16*0)
    restore_pair x21, x22, (STACK_BASE_GPRS + 16*1)
    restore_pair x23, x24, (STACK_BASE_GPRS + 16*2)
    restore_pair x25, x26, (STACK_BASE_GPRS + 16*3)
    restore_pair x27, x28, (STACK_BASE_GPRS + 16*4)
    restore_pair x29, x30, (STACK_BASE_GPRS + 16*5)
.endm

.macro save_vregs
    push_pair d8, d9, (STACK_BASE_VREGS+0*16)
    push_pair d10, d11, (STACK_BASE_VREGS+1*16)
    push_pair d12, d13, (STACK_BASE_VREGS+2*16)
    push_pair d14, d15, (STACK_BASE_VREGS+3*16)
.endm

.macro restore_vregs
    restore_pair d14, d15, (STACK_BASE_VREGS+3*16)
    restore_pair d12, d13, (STACK_BASE_VREGS+2*16)
    restore_pair d10, d11, (STACK_BASE_VREGS+1*16)
    restore_pair d8, d9, (STACK_BASE_VREGS+0*16)
.endm

.macro alloc_stack stack_size
    sub sp, sp, #\stack_size
    .cfi_adjust_cfa_offset \stack_size
.endm

.macro free_stack stack_size
    add sp, sp, #\stack_size
    .cfi_adjust_cfa_offset -\stack_size
.endm

.macro eor5 dst, src0, src1, src2, src3, src4
    eor \dst, \src0, \src1
    eor \dst, \dst,  \src2
    eor \dst, \dst,  \src3
    eor \dst, \dst,  \src4
.endm

.macro  chi_step_ror out, a, b, c, r1, r2
    bic X<tmp>, \b\(), \c\(), ror #\r1
    eor \out\(), X<tmp>, \a\(), ror #\r2
.endm

.macro  chi_step_ror2 out, a, b, c, r1, r2
    bic X<tmp>, \b\(), \c\(), ror #\r1
    eor \out\(), \a\(), X<tmp>, ror #\r2
.endm

// NOTE: This is copied from the de-symbolized version of
// keccak_f1600_x1_scalar_symbolic.S. When changing the scalar code,
// SLOTHY needs to be re-run to re-allocate registers and stack spills,
// and the resulting code copied here.
//
// TODO: Automate this
.macro scalar_round_initial
        eor x30, x24, x25                         // *.....................................................
        eor x27, x9, x10                          // *.....................................................
        eor x0, x30, x21                          // .*....................................................
        eor x26, x27, x6                          // .*....................................................
        eor x27, x26, x7                          // ..*...................................................
        eor x29, x0, x22                          // ..*...................................................
        eor x26, x29, x23                         // ...*..................................................
        eor x29, x4, x5                           // ...*..................................................
        eor x30, x29, x1                          // ....*.................................................
        eor x0, x27, x8                           // ....*.................................................
        eor x29, x30, x2                          // .....*................................................
        eor x30, x19, x20                         // .....*................................................
        eor x30, x30, x16                         // ......*...............................................
        eor x27, x26, x0, ror #63                 // ......*...............................................
        eor x4, x4, x27                           // .......*..............................................
        eor x30, x30, x17                         // .......*..............................................
        eor x30, x30, x28                         // ........*.............................................
        eor x29, x29, x3                          // ........*.............................................
        eor x0, x0, x30, ror #63                  // .........*............................................
        eor x30, x30, x29, ror #63                // .........*............................................
        eor x22, x22, x30                         // ..........*...........................................
        eor x23, x23, x30                         // ..........*...........................................
        str x23, [sp, #STACK_LOC_0]               // ...........*.......................................... // @slothy:writes=stack_0
        eor x23, x14, x15                         // ...........*..........................................
        eor x14, x14, x0                          // ............*.........................................
        eor x23, x23, x11                         // ............*.........................................
        eor x15, x15, x0                          // .............*........................................
        eor x1, x1, x27                           // .............*........................................
        eor x23, x23, x12                         // ..............*.......................................
        eor x23, x23, x13                         // ...............*......................................
        eor x11, x11, x0                          // ...............*......................................
        eor x29, x29, x23, ror #63                // ................*.....................................
        eor x23, x23, x26, ror #63                // ................*.....................................
        eor x26, x13, x0                          // .................*....................................
        eor x13, x28, x23                         // .................*....................................
        eor x28, x24, x30                         // ..................*...................................
        eor x24, x16, x23                         // ..................*...................................
        eor x16, x21, x30                         // ...................*..................................
        eor x21, x25, x30                         // ...................*..................................
        eor x30, x19, x23                         // ....................*.................................
        eor x19, x20, x23                         // ....................*.................................
        eor x20, x17, x23                         // .....................*................................
        eor x17, x12, x0                          // .....................*................................
        eor x0, x2, x27                           // ......................*...............................
        eor x2, x6, x29                           // ......................*...............................
        eor x6, x8, x29                           // .......................*..............................
        bic x8, x28, x13, ror #47                 // .......................*..............................
        eor x12, x3, x27                          // ........................*.............................
        bic x3, x13, x17, ror #19                 // ........................*.............................
        eor x5, x5, x27                           // .........................*............................
        ldr x27, [sp, #STACK_LOC_0]               // .........................*............................ // @slothy:reads=stack_0
        bic x25, x17, x2, ror #5                  // ..........................*...........................
        eor x9, x9, x29                           // ..........................*...........................
        eor x23, x25, x5, ror #52                 // ...........................*..........................
        eor x3, x3, x2, ror #24                   // ...........................*..........................
        eor x8, x8, x17, ror #2                   // ............................*.........................
        eor x17, x10, x29                         // ............................*.........................
        bic x25, x12, x22, ror #47                // .............................*........................
        eor x29, x7, x29                          // .............................*........................
        bic x10, x4, x27, ror #2                  // ..............................*.......................
        bic x7, x5, x28, ror #10                  // ..............................*.......................
        eor x10, x10, x20, ror #50                // ...............................*......................
        eor x13, x7, x13, ror #57                 // ...............................*......................
        bic x7, x2, x5, ror #47                   // ................................*.....................
        eor x2, x25, x24, ror #39                 // ................................*.....................
        bic x25, x20, x11, ror #57                // .................................*....................
        bic x5, x17, x4, ror #25                  // .................................*....................
        eor x25, x25, x17, ror #53                // ..................................*...................
        bic x17, x11, x17, ror #60                // ..................................*...................
        eor x28, x7, x28, ror #57                 // ...................................*..................
        bic x7, x9, x12, ror #42                  // ...................................*..................
        eor x7, x7, x22, ror #25                  // ....................................*.................
        bic x22, x22, x24, ror #56                // ....................................*.................
        bic x24, x24, x15, ror #31                // .....................................*................
        eor x22, x22, x15, ror #23                // .....................................*................
        bic x20, x27, x20, ror #48                // ......................................*...............
        bic x15, x15, x9, ror #16                 // ......................................*...............
        eor x12, x15, x12, ror #58                // .......................................*..............
        eor x15, x5, x27, ror #27                 // .......................................*..............
        eor x5, x20, x11, ror #41                 // ........................................*.............
        ldr x11, [sp, #STACK_OFFSET_CONST_SCALAR] // ........................................*.............
        eor x20, x17, x4, ror #21                 // .........................................*............
        eor x17, x24, x9, ror #47                 // .........................................*............
        mov x24, #1                               // ..........................................*...........
        bic x9, x0, x16, ror #9                   // ..........................................*...........
        str x24, [sp, #STACK_OFFSET_COUNT]        // ...........................................*.......... // @slothy:writes=STACK_OFFSET_COUNT
        bic x24, x29, x1, ror #44                 // ...........................................*..........
        bic x27, x1, x21, ror #50                 // ............................................*.........
        bic x4, x26, x29, ror #63                 // ............................................*.........
        eor x1, x1, x4, ror #21                   // .............................................*........
        ldr x11, [x11]                            // .............................................*........
        bic x4, x21, x30, ror #57                 // ..............................................*.......
        eor x21, x24, x21, ror #30                // ..............................................*.......
        eor x24, x9, x19, ror #44                 // ...............................................*......
        bic x9, x14, x6, ror #5                   // ...............................................*......
        eor x9, x9, x0, ror #43                   // ................................................*.....
        bic x0, x6, x0, ror #38                   // ................................................*.....
        eor x1, x1, x11                           // .................................................*....
        eor x11, x4, x26, ror #35                 // .................................................*....
        eor x4, x0, x16, ror #47                  // ..................................................*...
        bic x0, x16, x19, ror #35                 // ..................................................*...
        eor x16, x27, x30, ror #43                // ...................................................*..
        bic x27, x30, x26, ror #42                // ...................................................*..
        bic x26, x19, x14, ror #41                // ....................................................*.
        eor x19, x0, x14, ror #12                 // ....................................................*.
        eor x14, x26, x6, ror #46                 // .....................................................*
        eor x6, x27, x29, ror #41                 // .....................................................*

    // eor5 X<sC0>, sAma, sAsa, tAba, sAga, sAka
    // eor5 X<sC1>, sAme, sAse, sAbe, sAge, sAke
    // eor5 X<sC2>, sAmi, sAsi, sAbi, sAgi, sAki
    // eor5 X<sC3>, sAmo, sAso, sAbo, sAgo, sAko
    // eor5 X<sC4>, sAmu, sAsu, sAbu, sAgu, sAku

    // eor X<sE1>, X<sC0>, X<sC2>, ror #63
    // eor X<sE3>, X<sC2>, X<sC4>, ror #63
    // eor X<sE0>, X<sC4>, X<sC1>, ror #63
    // eor X<sE2>, X<sC1>, X<sC3>, ror #63
    // eor X<sE4>, X<sC3>, X<sC0>, ror #63

    // eor X<sBba>, tAba, X<sE0>
    // eor X<sBsa>, sAbi, X<sE2>
    // eor X<sBbi>, sAki, X<sE2>
    // eor X<sBki>, sAko, X<sE3>
    // eor X<sBko>, sAmu, X<sE4>
    // eor X<sBmu>, sAso, X<sE3>
    // eor X<sBso>, sAma, X<sE0>
    // eor X<sBka>, sAbe, X<sE1>
    // eor X<sBse>, sAgo, X<sE3>
    // eor X<sBgo>, sAme, X<sE1>
    // eor X<sBke>, sAgi, X<sE2>
    // eor X<sBgi>, sAka, X<sE0>
    // eor X<sBga>, sAbo, X<sE3>
    // eor X<sBbo>, sAmo, X<sE3>
    // eor X<sBmo>, sAmi, X<sE2>
    // eor X<sBmi>, sAke, X<sE1>
    // eor X<sBge>, sAgu, X<sE4>
    // eor X<sBgu>, sAsi, X<sE2>
    // eor X<sBsi>, sAku, X<sE4>
    // eor X<sBku>, sAsa, X<sE0>
    // eor X<sBma>, sAbu, X<sE4>
    // eor X<sBbu>, sAsu, X<sE4>
    // eor X<sBsu>, sAse, X<sE1>
    // eor X<sBme>, sAga, X<sE0>
    // eor X<sBbe>, sAge, X<sE1>

    // ldr X<caddr>, [sp, #STACK_OFFSET_CONST_SCALAR]
    // ldr X<cur_const>, [X<caddr>]
    // mov X<count>, #1
    // str X<count>, [sp, #STACK_OFFSET_COUNT] // @slothy:writes=STACK_OFFSET_COUNT

    // chi_step_ror sAga, X<sBga>, X<sBgi>, X<sBge>, 47, 39
    // chi_step_ror sAge, X<sBge>, X<sBgo>, X<sBgi>, 42, 25
    // chi_step_ror sAgi, X<sBgi>, X<sBgu>, X<sBgo>, 16, 58
    // chi_step_ror sAgo, X<sBgo>, X<sBga>, X<sBgu>, 31, 47
    // chi_step_ror sAgu, X<sBgu>, X<sBge>, X<sBga>, 56, 23
    // chi_step_ror sAka, X<sBka>, X<sBki>, X<sBke>, 19, 24
    // chi_step_ror sAke, X<sBke>, X<sBko>, X<sBki>, 47, 2
    // chi_step_ror sAki, X<sBki>, X<sBku>, X<sBko>, 10, 57
    // chi_step_ror sAko, X<sBko>, X<sBka>, X<sBku>, 47, 57
    // chi_step_ror sAku, X<sBku>, X<sBke>, X<sBka>, 5,  52
    // chi_step_ror sAma, X<sBma>, X<sBmi>, X<sBme>, 38, 47
    // chi_step_ror sAme, X<sBme>, X<sBmo>, X<sBmi>, 5,  43
    // chi_step_ror sAmi, X<sBmi>, X<sBmu>, X<sBmo>, 41, 46
    // chi_step_ror sAmo, X<sBmo>, X<sBma>, X<sBmu>, 35, 12
    // chi_step_ror sAmu, X<sBmu>, X<sBme>, X<sBma>, 9,  44
    // chi_step_ror sAsa, X<sBsa>, X<sBsi>, X<sBse>, 48, 41
    // chi_step_ror sAse, X<sBse>, X<sBso>, X<sBsi>, 2,  50
    // chi_step_ror sAsi, X<sBsi>, X<sBsu>, X<sBso>, 25, 27
    // chi_step_ror sAso, X<sBso>, X<sBsa>, X<sBsu>, 60, 21
    // chi_step_ror sAsu, X<sBsu>, X<sBse>, X<sBsa>, 57, 53
    // chi_step_ror2 tAba, X<sBba>, X<sBbi>, X<sBbe>, 63, 21
    // chi_step_ror sAbe, X<sBbe>, X<sBbo>, X<sBbi>, 42, 41
    // chi_step_ror sAbi, X<sBbi>, X<sBbu>, X<sBbo>, 57, 35
    // chi_step_ror sAbo, X<sBbo>, X<sBba>, X<sBbu>, 50, 43
    // chi_step_ror sAbu, X<sBbu>, X<sBbe>, X<sBba>, 44, 30

    // eor tAba, tAba, X<cur_const>
.endm

.macro vector_round
   eor3_m1 C0, vAba, vAga, vAka
   eor3_m1 C0, C0, vAma,  vAsa
   eor3_m1 C1, vAbe, vAge, vAke
   eor3_m1 C1, C1, vAme,  vAse
   eor3_m1 C2, vAbi, vAgi, vAki
   eor3_m1 C2, C2, vAmi,  vAsi
   eor3_m1 C3, vAbo, vAgo, vAko
   eor3_m1 C3, C3, vAmo,  vAso
   eor3_m1 C4, vAbu, vAgu, vAku
   eor3_m1 C4, C4, vAmu,  vAsu
   rax1_m1 E1, C0, C2
   rax1_m1 E3, C2, C4
   rax1_m1 E0, C4, C1
   rax1_m1 E2, C1, C3
   rax1_m1 E4, C3, C0
   eor vAba_.16b, vAba.16b, E0.16b
   xar_m1 vAsa_, vAbi, E2, 2
   xar_m1 vAbi_, vAki, E2, 21
   xar_m1 vAki_, vAko, E3, 39
   xar_m1 vAko_, vAmu, E4, 56
   xar_m1 vAmu_, vAso, E3, 8
   xar_m1 vAso_, vAma, E0, 23
   xar_m1 vAka_, vAbe, E1, 63
   xar_m1 vAse_, vAgo, E3, 9
   xar_m1 vAgo_, vAme, E1, 19
   xar_m1 vAke_, vAgi, E2, 58
   xar_m1 vAgi_, vAka, E0, 61
   xar_m1 vAga_, vAbo, E3, 36
   xar_m1 vAbo_, vAmo, E3, 43
   xar_m1 vAmo_, vAmi, E2, 49
   xar_m1 vAmi_, vAke, E1, 54
   xar_m1 vAge_, vAgu, E4, 44
   xar_m1 vAgu_, vAsi, E2, 3
   xar_m1 vAsi_, vAku, E4, 25
   xar_m1 vAku_, vAsa, E0, 46
   xar_m1 vAma_, vAbu, E4, 37
   xar_m1 vAbu_, vAsu, E4, 50
   xar_m1 vAsu_, vAse, E1, 62
   xar_m1 vAme_, vAga, E0, 28
   xar_m1 vAbe_, vAge, E1, 20
   ldr tmp, [sp, #STACK_OFFSET_CONST_VECTOR] // @slothy:reads=STACK_OFFSET_CONST_VECTOR
   ld1r {v28.2d}, [tmp], #8
   str tmp, [sp, #STACK_OFFSET_CONST_VECTOR] // @slothy:writes=STACK_OFFSET_CONST_VECTOR
   bcax_m1 vAga, vAga_, vAgi_, vAge_
   bcax_m1 vAge, vAge_, vAgo_, vAgi_
   bcax_m1 vAgi, vAgi_, vAgu_, vAgo_
   bcax_m1 vAgo, vAgo_, vAga_, vAgu_
   bcax_m1 vAgu, vAgu_, vAge_, vAga_
   bcax_m1 vAka, vAka_, vAki_, vAke_
   bcax_m1 vAke, vAke_, vAko_, vAki_
   bcax_m1 vAki, vAki_, vAku_, vAko_
   bcax_m1 vAko, vAko_, vAka_, vAku_
   bcax_m1 vAku, vAku_, vAke_, vAka_
   bcax_m1 vAma, vAma_, vAmi_, vAme_
   bcax_m1 vAme, vAme_, vAmo_, vAmi_
   bcax_m1 vAmi, vAmi_, vAmu_, vAmo_
   bcax_m1 vAmo, vAmo_, vAma_, vAmu_
   bcax_m1 vAmu, vAmu_, vAme_, vAma_
   bcax_m1 vAsa, vAsa_, vAsi_, vAse_
   bcax_m1 vAse, vAse_, vAso_, vAsi_
   bcax_m1 vAsi, vAsi_, vAsu_, vAso_
   bcax_m1 vAso, vAso_, vAsa_, vAsu_
   bcax_m1 vAsu, vAsu_, vAse_, vAsa_
   bcax_m1 vAba, vAba_, vAbi_, vAbe_
   bcax_m1 vAbe, vAbe_, vAbo_, vAbi_
   bcax_m1 vAbi, vAbi_, vAbu_, vAbo_
   bcax_m1 vAbo, vAbo_, vAba_, vAbu_
   bcax_m1 vAbu, vAbu_, vAbe_, vAba_
   eor vAba.16b, vAba.16b, v28.16b
.endm

.macro scalar_round_noninitial
        eor x0, x15, x11, ror #52                 // *........................................................
        eor x0, x0, x13, ror #48                  // .*.......................................................
        eor x26, x8, x9, ror #57                  // .*.......................................................
        eor x27, x0, x14, ror #10                 // ..*......................................................
        eor x29, x16, x28, ror #63                // ..*......................................................
        eor x26, x26, x6, ror #51                 // ...*.....................................................
        eor x30, x23, x22, ror #50                // ...*.....................................................
        eor x0, x26, x10, ror #31                 // ....*....................................................
        eor x29, x29, x19, ror #37                // ....*....................................................
        eor x27, x27, x12, ror #5                 // .....*...................................................
        eor x30, x30, x24, ror #34                // .....*...................................................
        eor x0, x0, x7, ror #27                   // ......*..................................................
        eor x26, x30, x21, ror #26                // ......*..................................................
        eor x26, x26, x25, ror #15                // .......*.................................................
        ror x30, x27, #62                         // .......*.................................................
        eor x30, x30, x26, ror #57                // ........*................................................
        ror x26, x26, #58                         // ........*................................................
        eor x16, x30, x16                         // .........*...............................................
        eor x28, x30, x28, ror #63                // .........*...............................................
        str x28, [sp, #STACK_LOC_0]               // ..........*.............................................. // @slothy:writes=stack_0
        eor x29, x29, x17, ror #36                // ..........*..............................................
        eor x28, x1, x2, ror #61                  // ...........*.............................................
        eor x19, x30, x19, ror #37                // ...........*.............................................
        eor x29, x29, x20, ror #2                 // ............*............................................
        eor x28, x28, x4, ror #54                 // ............*............................................
        eor x26, x26, x0, ror #55                 // .............*...........................................
        eor x28, x28, x3, ror #39                 // .............*...........................................
        eor x28, x28, x5, ror #25                 // ..............*..........................................
        ror x0, x0, #56                           // ..............*..........................................
        eor x0, x0, x29, ror #63                  // ...............*.........................................
        eor x27, x28, x27, ror #61                // ...............*.........................................
        eor x13, x0, x13, ror #46                 // ................*........................................
        eor x28, x29, x28, ror #63                // ................*........................................
        eor x29, x30, x20, ror #2                 // .................*.......................................
        eor x20, x26, x3, ror #39                 // .................*.......................................
        eor x11, x0, x11, ror #50                 // ..................*......................................
        eor x25, x28, x25, ror #9                 // ..................*......................................
        eor x3, x28, x21, ror #20                 // ...................*.....................................
        eor x21, x26, x1                          // ...................*.....................................
        eor x9, x27, x9, ror #49                  // ....................*....................................
        eor x24, x28, x24, ror #28                // ....................*....................................
        eor x1, x30, x17, ror #36                 // .....................*...................................
        eor x14, x0, x14, ror #8                  // .....................*...................................
        eor x22, x28, x22, ror #44                // ......................*..................................
        eor x8, x27, x8, ror #56                  // ......................*..................................
        eor x17, x27, x7, ror #19                 // .......................*.................................
        eor x15, x0, x15, ror #62                 // .......................*.................................
        bic x7, x20, x22, ror #47                 // ........................*................................
        eor x4, x26, x4, ror #54                  // ........................*................................
        eor x0, x0, x12, ror #3                   // .........................*...............................
        eor x28, x28, x23, ror #58                // .........................*...............................
        eor x23, x26, x2, ror #61                 // ..........................*..............................
        eor x26, x26, x5, ror #25                 // ..........................*..............................
        eor x2, x7, x16, ror #39                  // ...........................*.............................
        bic x7, x9, x20, ror #42                  // ...........................*.............................
        bic x30, x15, x9, ror #16                 // ............................*............................
        eor x7, x7, x22, ror #25                  // ............................*............................
        eor x12, x30, x20, ror #58                // .............................*...........................
        bic x20, x22, x16, ror #56                // .............................*...........................
        eor x30, x27, x6, ror #43                 // ..............................*..........................
        eor x22, x20, x15, ror #23                // ..............................*..........................
        bic x6, x19, x13, ror #42                 // ...............................*.........................
        eor x6, x6, x17, ror #41                  // ................................*........................
        bic x5, x13, x17, ror #63                 // ................................*........................
        eor x5, x21, x5, ror #21                  // .................................*.......................
        bic x17, x17, x21, ror #44                // .................................*.......................
        eor x27, x27, x10, ror #23                // ..................................*......................
        bic x21, x21, x25, ror #50                // ..................................*......................
        bic x20, x27, x4, ror #25                 // ...................................*.....................
        bic x10, x16, x15, ror #31                // ...................................*.....................
        eor x16, x21, x19, ror #43                // ....................................*....................
        eor x21, x17, x25, ror #30                // ....................................*....................
        bic x19, x25, x19, ror #57                // .....................................*...................
        ldr x25, [sp, #STACK_OFFSET_COUNT]        // .....................................*................... // @slothy:reads=STACK_OFFSET_COUNT
        eor x17, x10, x9, ror #47                 // ......................................*..................
        ldr x9, [sp, #STACK_OFFSET_CONST_SCALAR]  // ......................................*..................
        eor x15, x20, x28, ror #27                // .......................................*.................
        bic x20, x4, x28, ror #2                  // .......................................*.................
        eor x10, x20, x1, ror #50                 // ........................................*................
        bic x20, x11, x27, ror #60                // ........................................*................
        eor x20, x20, x4, ror #21                 // .........................................*...............
        bic x4, x28, x1, ror #48                  // .........................................*...............
        bic x1, x1, x11, ror #57                  // ..........................................*..............
        ldr x28, [x9, x25, LSL #3]                // ..........................................*..............
        ldr x9, [sp, #STACK_LOC_0]                // ...........................................*............. // @slothy:reads=stack_0
        add x25, x25, #1                          // ...........................................*.............
        str x25, [sp, #STACK_OFFSET_COUNT]        // ............................................*............ // @slothy:writes=STACK_OFFSET_COUNT
        cmp x25, #(KECCAK_F1600_ROUNDS-1)         // ............................................*............ // @slothy:ignore_useless_output
        eor x25, x1, x27, ror #53                 // .............................................*...........
        bic x27, x30, x26, ror #47                // .............................................*...........
        eor x1, x5, x28                           // ..............................................*..........
        eor x5, x4, x11, ror #41                  // ..............................................*..........
        eor x11, x19, x13, ror #35                // ...............................................*.........
        bic x13, x26, x24, ror #10                // ...............................................*.........
        eor x28, x27, x24, ror #57                // ................................................*........
        bic x27, x24, x9, ror #47                 // ................................................*........
        bic x19, x23, x3, ror #9                  // .................................................*.......
        bic x4, x29, x14, ror #41                 // .................................................*.......
        eor x24, x19, x29, ror #44                // ..................................................*......
        bic x29, x3, x29, ror #35                 // ..................................................*......
        eor x13, x13, x9, ror #57                 // ...................................................*.....
        eor x19, x29, x14, ror #12                // ...................................................*.....
        bic x29, x9, x0, ror #19                  // ....................................................*....
        bic x14, x14, x8, ror #5                  // ....................................................*....
        eor x9, x14, x23, ror #43                 // .....................................................*...
        eor x14, x4, x8, ror #46                  // .....................................................*...
        bic x23, x8, x23, ror #38                 // ......................................................*..
        eor x8, x27, x0, ror #2                   // ......................................................*..
        eor x4, x23, x3, ror #47                  // .......................................................*.
        bic x3, x0, x30, ror #5                   // .......................................................*.
        eor x23, x3, x26, ror #52                 // ........................................................*
        eor x3, x29, x30, ror #24                 // ........................................................*

    // eor X<sC0>, tAba,   sAga, ror #61
    // eor X<sC0>, X<sC0>, sAma, ror #54
    // eor X<sC0>, X<sC0>, sAka, ror #39
    // eor X<sC0>, X<sC0>, sAsa, ror #25

    // eor X<sC1>, sAke,   sAme, ror #57
    // eor X<sC1>, X<sC1>, sAbe, ror #51
    // eor X<sC1>, X<sC1>, sAse, ror #31
    // eor X<sC1>, X<sC1>, sAge, ror #27

    // eor X<sC2>, sAsi,   sAbi, ror #52
    // eor X<sC2>, X<sC2>, sAki, ror #48
    // eor X<sC2>, X<sC2>, sAmi, ror #10
    // eor X<sC2>, X<sC2>, sAgi, ror #5

    // eor X<sC3>, sAbo,   sAko, ror #63
    // eor X<sC3>, X<sC3>, sAmo, ror #37
    // eor X<sC3>, X<sC3>, sAgo, ror #36
    // eor X<sC3>, X<sC3>, sAso, ror #2

    // eor X<sC4>, sAku,   sAgu, ror #50
    // eor X<sC4>, X<sC4>, sAmu, ror #34
    // eor X<sC4>, X<sC4>, sAbu, ror #26
    // eor X<sC4>, X<sC4>, sAsu, ror #15

    // eor X<sE1>, X<sC0>, X<sC2>, ror #61
    // ror X<sC2>, X<sC2>, #62
    // eor X<sE3>, X<sC2>, X<sC4>, ror #57
    // ror X<sC4>, X<sC4>, #58
    // eor X<sE0>, X<sC4>, X<sC1>, ror #55
    // ror X<sC1>, X<sC1>, #56
    // eor X<sE2>, X<sC1>, X<sC3>, ror #63
    // eor X<sE4>, X<sC3>, X<sC0>, ror #63

    // eor X<sBba>, X<sE0>, tAba
    // eor X<sBsa>, X<sE2>, sAbi, ror #50
    // eor X<sBbi>, X<sE2>, sAki, ror #46
    // eor X<sBki>, X<sE3>, sAko, ror #63
    // eor X<sBko>, X<sE4>, sAmu, ror #28
    // eor X<sBmu>, X<sE3>, sAso, ror #2
    // eor X<sBso>, X<sE0>, sAma, ror #54
    // eor X<sBka>, X<sE1>, sAbe, ror #43
    // eor X<sBse>, X<sE3>, sAgo, ror #36
    // eor X<sBgo>, X<sE1>, sAme, ror #49
    // eor X<sBke>, X<sE2>, sAgi, ror #3
    // eor X<sBgi>, X<sE0>, sAka, ror #39
    // eor X<sBga>, X<sE3>, sAbo
    // eor X<sBbo>, X<sE3>, sAmo, ror #37
    // eor X<sBmo>, X<sE2>, sAmi, ror #8
    // eor X<sBmi>, X<sE1>, sAke, ror #56
    // eor X<sBge>, X<sE4>, sAgu, ror #44
    // eor X<sBgu>, X<sE2>, sAsi, ror #62
    // eor X<sBsi>, X<sE4>, sAku, ror #58
    // eor X<sBku>, X<sE0>, sAsa, ror #25
    // eor X<sBma>, X<sE4>, sAbu, ror #20
    // eor X<sBbu>, X<sE4>, sAsu, ror #9
    // eor X<sBsu>, X<sE1>, sAse, ror #23
    // eor X<sBme>, X<sE0>, sAga, ror #61
    // eor X<sBbe>, X<sE1>, sAge, ror #19

    // ldr X<caddr>, [sp, #STACK_OFFSET_CONST_SCALAR]
    // ldr X<count>, [sp, #STACK_OFFSET_COUNT] // @slothy:reads=STACK_OFFSET_COUNT
    // ldr X<cur_const>, [X<caddr>, X<count>, LSL #3]
    // add X<count>, X<count>, #1
    // cmp X<count>, #(KECCAK_F1600_ROUNDS-1)  // @slothy:ignore_useless_output
    // str X<count>, [sp, #STACK_OFFSET_COUNT] // @slothy:writes=STACK_OFFSET_COUNT

    // chi_step_ror sAga, X<sBga>, X<sBgi>, X<sBge>, 47, 39
    // chi_step_ror sAge, X<sBge>, X<sBgo>, X<sBgi>, 42, 25
    // chi_step_ror sAgi, X<sBgi>, X<sBgu>, X<sBgo>, 16, 58
    // chi_step_ror sAgo, X<sBgo>, X<sBga>, X<sBgu>, 31, 47
    // chi_step_ror sAgu, X<sBgu>, X<sBge>, X<sBga>, 56, 23
    // chi_step_ror sAka, X<sBka>, X<sBki>, X<sBke>, 19, 24
    // chi_step_ror sAke, X<sBke>, X<sBko>, X<sBki>, 47, 2
    // chi_step_ror sAki, X<sBki>, X<sBku>, X<sBko>, 10, 57
    // chi_step_ror sAko, X<sBko>, X<sBka>, X<sBku>, 47, 57
    // chi_step_ror sAku, X<sBku>, X<sBke>, X<sBka>, 5,  52
    // chi_step_ror sAma, X<sBma>, X<sBmi>, X<sBme>, 38, 47
    // chi_step_ror sAme, X<sBme>, X<sBmo>, X<sBmi>, 5,  43
    // chi_step_ror sAmi, X<sBmi>, X<sBmu>, X<sBmo>, 41, 46
    // chi_step_ror sAmo, X<sBmo>, X<sBma>, X<sBmu>, 35, 12
    // chi_step_ror sAmu, X<sBmu>, X<sBme>, X<sBma>, 9,  44
    // chi_step_ror sAsa, X<sBsa>, X<sBsi>, X<sBse>, 48, 41
    // chi_step_ror sAse, X<sBse>, X<sBso>, X<sBsi>, 2,  50
    // chi_step_ror sAsi, X<sBsi>, X<sBsu>, X<sBso>, 25, 27
    // chi_step_ror sAso, X<sBso>, X<sBsa>, X<sBsu>, 60, 21
    // chi_step_ror sAsu, X<sBsu>, X<sBse>, X<sBsa>, 57, 53
    // chi_step_ror2 tAba, X<sBba>, X<sBbi>, X<sBbe>, 63, 21
    // chi_step_ror sAbe, X<sBbe>, X<sBbo>, X<sBbi>, 42, 41
    // chi_step_ror sAbi, X<sBbi>, X<sBbu>, X<sBbo>, 57, 35
    // chi_step_ror sAbo, X<sBbo>, X<sBba>, X<sBbu>, 50, 43
    // chi_step_ror sAbu, X<sBbu>, X<sBbe>, X<sBba>, 44, 30

    // eor tAba, tAba, X<cur_const>
.endm

.macro final_scalar_rotate
    ror sAga, sAga,#(64-3)
    ror sAka, sAka,#(64-25)
    ror sAma, sAma,#(64-10)
    ror sAsa, sAsa,#(64-39)
    ror sAbe, sAbe,#(64-21)
    ror sAge, sAge,#(64-45)
    ror sAke, sAke,#(64-8)
    ror sAme, sAme,#(64-15)
    ror sAse, sAse,#(64-41)
    ror sAbi, sAbi,#(64-14)
    ror sAgi, sAgi,#(64-61)
    ror sAki, sAki,#(64-18)
    ror sAmi, sAmi,#(64-56)
    ror sAsi, sAsi,#(64-2)
    ror sAgo, sAgo,#(64-28)
    ror sAko, sAko,#(64-1)
    ror sAmo, sAmo,#(64-27)
    ror sAso, sAso,#(64-62)
    ror sAbu, sAbu,#(64-44)
    ror sAgu, sAgu,#(64-20)
    ror sAku, sAku,#(64-6)
    ror sAmu, sAmu,#(64-36)
    ror sAsu, sAsu,#(64-55)
.endm

    .text
    .global MLK_ASM_NAMESPACE(keccak_f1600_x4_v8a_scalar_hybrid_asm)
    .balign 4
MLK_ASM_FN_SYMBOL(keccak_f1600_x4_v8a_scalar_hybrid_asm)
    .cfi_startproc
    alloc_stack STACK_SIZE
    save_gprs
    save_vregs

    mov const_addr, input_rc

    mov outer, #0
    str outer,      [sp, #STACK_OFFSET_OUTER]        // @slothy:writes=STACK_OFFSET_OUTER
    str const_addr, [sp, #STACK_OFFSET_CONST_SCALAR] // @slothy:writes=STACK_OFFSET_CONST_SCALAR
    str const_addr, [sp, #STACK_OFFSET_CONST_VECTOR] // @slothy:writes=STACK_OFFSET_CONST_VECTOR
    str input_addr, [sp, #STACK_OFFSET_INPUT]        // @slothy:writes=STACK_OFFSET_INPUT

    load_input_vector   // Vector input
    load_input_scalar 0 // First scalar input

Lkeccak_f1600_x4_v8a_scalar_hybrid_initial:
    scalar_round_initial    // @slothy:interleaving_class=0
    scalar_round_noninitial // @slothy:interleaving_class=0
    vector_round            // @slothy:interleaving_class=1
Lkeccak_f1600_x4_v8a_scalar_hybrid_loop:
    scalar_round_noninitial // @slothy:interleaving_class=0
    scalar_round_noninitial // @slothy:interleaving_class=0
    vector_round            // @slothy:interleaving_class=1
Lkeccak_f1600_x4_v8a_scalar_hybrid_loop_end:
    ble Lkeccak_f1600_x4_v8a_scalar_hybrid_loop
    final_scalar_rotate

    // Read outer loop flag: We repeat the above twice
    ldr outer, [sp, #STACK_OFFSET_OUTER]      // @slothy:reads=STACK_OFFSET_OUTER
    cmp outer, #1
    beq Lkeccak_f1600_x4_v8a_scalar_hybrid_done

    // Update outer loop flag
    mov outer, #1
    str outer, [sp, #STACK_OFFSET_OUTER]      // @slothy:writes=STACK_OFFSET_OUTER

    ldr input_addr, [sp, #STACK_OFFSET_INPUT] // @slothy:reads=STACK_OFFSET_INPUT
    store_input_scalar 0 // Store first scalar data
    load_input_scalar  1 // Load second scalar input

    b Lkeccak_f1600_x4_v8a_scalar_hybrid_initial
Lkeccak_f1600_x4_v8a_scalar_hybrid_done:

    ldr input_addr, [sp, #STACK_OFFSET_INPUT] // @slothy:reads=STACK_OFFSET_INPUT
    store_input_scalar 1
    store_input_vector

    restore_vregs
    restore_gprs
    free_stack STACK_SIZE
    ret
    .cfi_endproc

/****************** REGISTER DEALLOCATIONS *******************/
    .unreq input_addr
    .unreq input_addr_hi
    .unreq input_rc
    .unreq const_addr
    .unreq outer
    .unreq cur_const
    .unreq vAba
    .unreq vAbe
    .unreq vAbi
    .unreq vAbo
    .unreq vAbu
    .unreq vAga
    .unreq vAge
    .unreq vAgi
    .unreq vAgo
    .unreq vAgu
    .unreq vAka
    .unreq vAke
    .unreq vAki
    .unreq vAko
    .unreq vAku
    .unreq vAma
    .unreq vAme
    .unreq vAmi
    .unreq vAmo
    .unreq vAmu
    .unreq vAsa
    .unreq vAse
    .unreq vAsi
    .unreq vAso
    .unreq vAsu
    .unreq vAsud
    .unreq tmp0
    .unreq tmp1
    .unreq tmp2
    .unreq tmp3
    .unreq tmp0q
    .unreq tmp1q
    .unreq tmp2q
    .unreq tmp3q
    .unreq tmp0d
    .unreq tmp2d
    .unreq C0
    .unreq C1
    .unreq C2
    .unreq C3
    .unreq C4
    .unreq E0
    .unreq E1
    .unreq E2
    .unreq E3
    .unreq E4
    .unreq vAbi_
    .unreq vAbo_
    .unreq vAbu_
    .unreq vAga_
    .unreq vAge_
    .unreq vAgi_
    .unreq vAgo_
    .unreq vAgu_
    .unreq vAka_
    .unreq vAke_
    .unreq vAki_
    .unreq vAko_
    .unreq vAku_
    .unreq vAma_
    .unreq vAme_
    .unreq vAmi_
    .unreq vAmo_
    .unreq vAmu_
    .unreq vAsa_
    .unreq vAse_
    .unreq vAsi_
    .unreq vAso_
    .unreq vAsu_
    .unreq vAba_
    .unreq vAbe_
    .unreq vtmp
    .unreq tAba
    .unreq sAbe
    .unreq sAbi
    .unreq sAbo
    .unreq sAbu
    .unreq sAga
    .unreq sAge
    .unreq sAgi
    .unreq sAgo
    .unreq sAgu
    .unreq sAka
    .unreq sAke
    .unreq sAki
    .unreq sAko
    .unreq sAku
    .unreq sAma
    .unreq sAme
    .unreq sAmi
    .unreq sAmo
    .unreq sAmu
    .unreq sAsa
    .unreq sAse
    .unreq sAsi
    .unreq sAso
    .unreq sAsu
    .unreq tmp

/* To facilitate single-compilation-unit (SCU) builds, undefine all macros.
 * Don't modify by hand -- this is auto-generated by scripts/autogen. */
#undef KECCAK_F1600_ROUNDS
#undef STACK_LOCS
#undef STACK_SIZE
#undef STACK_BASE_GPRS
#undef STACK_BASE_VREGS
#undef STACK_OFFSET_LOCS
#undef STACK_OFFSET_INPUT
#undef STACK_OFFSET_CONST_SCALAR
#undef STACK_OFFSET_CONST_VECTOR
#undef STACK_OFFSET_COUNT
#undef STACK_OFFSET_OUTER
#undef STACK_LOC_0
#undef STACK_LOC_1

/* simpasm: footer-start */
#endif /* MLK_FIPS202_AARCH64_NEED_X4_V8A_SCALAR_HYBRID && \
          !MLK_CONFIG_MULTILEVEL_NO_SHARED */
